package less5;

public class Employees {
    // 1. Создать класс "Сотрудник" с полями: ФИО, должность, email, телефон, зарплата, возраст.
    private String name;               // Поля делаем приватными, т.е. доступными внутри класса.
    private String position;
    private String email;
    private String phone;
    private int salary;
    private int age;

    // Задание  2. Конструктор (Далее -К.) класса должен заполнять эти поля при создании объекта.
    // Комментарии : К. позволяет создать объект с набором определенных характеристик. К.схож с методом,если  его не
    // создавать, будет выполняться по умолчанию в out. О. не будет создан, если пропущен один из аргументов.
    // Слово this используется для указания, что Это name сотрудника (которого создаем) равно аргументу name в конструкторе.

    public Employees(String name, String position, String email, String phone, int salary, int age) {
        this.name = name;
        this.position = position;
        this.email = email;
        this.phone = phone;
        this.salary = salary;
        this.age = age;
    }

    // Задание 3. Внутри класса «Сотрудник» написать метод, который выводит информацию об объекте в консоль.
    // Комментарии: Используем public для возможности обращаться к методу извне
    public void print() {
        System.out.print("Name: " + name + "; \t" + "Position: " + position + "; \t"
                + "Email: " + email + "; \t" + "Phone: " + phone + "; \t"
                + "Salary: " + salary + "; \t" + "Age: " + age + "; \t");
        System.out.println();
    }
    // Методы, которые возвращают значение переменных, называются геттеры. Методы, которые изменяют значение свойств, называются сеттеры.
    public int getAge() {
        return age;
    }

}
// Дополнительно:
// Конструктор,  как и  метод можно перегружать - использовать разные наборы аргументов. Если нужны два конструктора (один с определнными
//характеристиками , второй пустой по умолочанию), второй нужно создать как пустой. Иначе работать не будет. Важно следить за послеловательностью аргументов
// - одинаковый набор аргумертов , но разный порядок расположения - это разные конструкторы.


// Модификатор доступа:
// Private - ограничивает видимость данных и методов пределами одного класса.
// Protected -  видимость в пределах всех классов, находящихся в одном  пакете, и в пределах всех классов-наследников класса.
// Default (package visible) - он не обозначается ключевым словом, поскольку установлен в Java по умолчанию для всех полей и методов
// н-р, int x. Он может быть виден и использован только тем пакетом , в котором он был объявлен
// public - виден всем





