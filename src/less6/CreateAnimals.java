package less6;

public class CreateAnimals {
    public static void main (String[] args) {

        Cat cat = new Cat("Barsik", "male", "Siamese", 2, true, "Myau", "White");
        Cat catOne = new Cat("Murka", "female", "unknown", 1, true, "Myau", "Black");



        Dog dog = new Dog("Alisa", "female", "Toy Terrier", 3, "small", true, "Gav");



        //cat.speak();
        //catOne.speak();
        cat.run(6);
        catOne.run(560);
        cat.swim(6);

        //dog.speak();
        dog.run(60);
        dog.swim(9);

    }
}
// 1. Родительский класс - это базовый класс. После объявления наследуемого класса нужно указать ключевое слово extends и написать имя родительского класса
// Унаследоваться можно только от одного класса.
// 2. Переопределение позволяет взять какой-то метод родительского класса и написать в каждом классе-наследнике свою реализацию этого метода.
// Перегрузка метода создание нескольких методоа с одинковым названием, но разным набором аргументов, а переопределение - это изменение тела метода (название одинковое)
// 3. Абстрактный класс — это максимально абстрактная, о-о-о-чень приблизительная «заготовка» для группы будущих классов.
// Эту заготовку нельзя использовать в готовом виде — слишком «сырая». Абстрактный класс — это просто чертеж для будущих «нормальных» классов.
// Но она описывает некое общее состояние и поведение, которым будут обладать будущие классы — наследники абстрактного класса.
// Класс является абстрактным, если хотя бы один из его методов является абстрактным. Если указываем Класс абстрактным,
// то мы не можем создать его как объект, он будет использоваться только как шаблон.
// Eсли метод помечен словом abstract, каждый класс-наследник должен его реализовать или быть объявленным как абстрактный. Иначе компилятор выдаст ошибку.
// Это контракт на уровне метода. Использовать в случаях, когда нельзя выделить общую часть.
// 4. Ключевое слово super  используется тогда, когда подклассу требуется сослаться на его непосредственный супер класс.
// Есть две формы: обращение к конструктору супер-класса (super(списокАргументов);) и к члену супер-класса (suреr.member;)
// 5. Final class - унаследовать нельзя. Запрещает создание объекта на его основе (абстракт - наоборот).
//



